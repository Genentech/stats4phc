% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/riskProfile.R
\name{riskProfile}
\alias{riskProfile}
\title{Risk profile plot}
\usage{
riskProfile(
  outcome,
  score,
  methods = "asis",
  prev.adj = NULL,
  show.prev = TRUE,
  show.nonparam.pv = TRUE,
  show.best.pv = TRUE,
  include = c("PC", "PPV", "1-NPV"),
  plot.raw = FALSE,
  rev.order = FALSE
)
}
\arguments{
\item{outcome}{Vector of binary outcome for each observation.}

\item{score}{Numeric vector of continuous predicted risk score.}

\item{methods}{Character vector of method names (case-insensitive) for plotting curves or
a named list where elements are method function and its arguments.
Default is set to \code{"asis"}.

Full options are: \code{c("asis", "binned", "pava", "mspline", "gam", "cgam")}.

To specify arguments per method, use lists. For example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(
  pava = list(method = "pava", ties = "primary"),
  mspline = list(method = "mspline", fitonPerc = TRUE),
  gam = list(method = "gam", bs = "tp", logscores = FALSE),
  bin = list(method = "binned", bins = 10),
  risk = list(method = "asis")
)
}\if{html}{\out{</div>}}

See section "Estimation" for more details.}

\item{prev.adj}{\code{NULL} (default) or scalar numeric between 0 and 1 for prevalence adjustment.}

\item{show.prev}{Logical, show prevalence value in the graph. Defaults to \code{TRUE}.}

\item{show.nonparam.pv}{Logical, show non-parametric calculation of PVs. Defaults to \code{TRUE}.}

\item{show.best.pv}{Logical, show best possible PVs. Defaults to \code{TRUE}.}

\item{include}{Character vector (case-insensitive, partial matching) specifying what quantities
to include in the plot.

Default is: \code{c("PC", "PPV", "1-NPV")}.

Full options are: \code{c("NPV", "PC", "PPV", "1-NPV")}.}

\item{plot.raw}{Logical to show percentiles or raw values.
Defaults to \code{FALSE} (i.e. percentiles).}

\item{rev.order}{Logical, reverse ordering of scores. Defaults to \code{FALSE}.}
}
\value{
A list containing the plot and data, plus \code{errorbar} data if they were requested
(through \code{"binned"} estimation method with a parameter \code{errorbar.sem}).
}
\description{
Predictiveness curve, PPV, NPV and 1-NPV risk estimates
}
\section{Estimation}{

The \code{methods} argument specifies the estimation method.
You can provide either a vector of strings, any of

\if{html}{\out{<div class="sourceCode">}}\preformatted{c("asis", "binned", "pava", "mspline", "gam", "cgam")
}\if{html}{\out{</div>}}

(\code{"asis"} is not available for \code{calibrationProfile}),
or a named list of lists.
In the latter case, the inner list must have an element "method",
which specifies the estimation function (one of those above),
and optionally other elements, which are passed to the estimation function.
For example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(
  gam = list(method = "gam", k = 3),
  c_gam = list(method = "cgam", numknots = 3)
)
}\if{html}{\out{</div>}}

To see what arguments are available for each estimation method,
see the documentation of that function.
The naming convention is \code{getXest},
where \code{X} stands for the estimation method, for example \code{\link[=getGAMest]{getGAMest()}}.

"gam", "cgam", and "mspline" always fit on percentiles by default.
To change this, use \code{fitonPerc = FALSE}, for example

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(gam = list(method = "gam", fitonPerc = FALSE))
}\if{html}{\out{</div>}}

"gam" and "cgam" methods are wrappers of \code{\link[mgcv:gam]{mgcv::gam()}} and \code{\link[cgam:cgam]{cgam::cgam()}}, respectively.
The default values of function arguments (like \code{k}, the number of knots in \code{\link[mgcv:s]{mgcv::s()}})
mirror the package defaults.
}

\examples{
# Read in example data
auroc <- read.csv(system.file("extdata", "sample.csv", package = "stats4phc"))
rscore <- auroc$predicted_calibrated
truth <- as.numeric(auroc$actual)

# Default plot includes 1-NPV, PPV, and a predictiveness curve (PC) based on risk-cutoff
p1 <- riskProfile(outcome = truth, score = rscore)
p1$plot
p1$data

# Show also NPV
p2 <- riskProfile(
  outcome = truth,
  score = rscore,
  include = c("PC", "NPV", "PPV", "1-NPV")
  # or use partial matching: include = c("PC", "N", "PPV", "1")
)
p2$plot
p2$data

# All estimates of prediction curve
p3 <- riskProfile(
  outcome = truth,
  score = rscore,
  methods = c("mspline", "gam", "cgam", "binned", "pava", "asis"),
  include = c("PC", "PPV", "1-NPV")
)
p3$plot

# Specifying method arguments (note each list has a "method" element)
p4 <- riskProfile(
  outcome = truth,
  score = rscore,
  methods = list(
    "gam" = list(method = "gam", bs = "tp", logscores = FALSE, fitonPerc = TRUE),
    "risk" = list(method = "asis"), # no available arguments for this method
    "bin" = list(method = "binned", quantiles = 10, errorbar.sem = 1.2)
  )
)
p4$plot

# Compare multiple GAMs in terms of Predictiveness Curves
p5 <- riskProfile(
  outcome = truth,
  score = rscore,
  methods = list(
    "gam_3" = list(method = "gam", k = 3),
    "gam_4" = list(method = "gam", k = 4),
    "gam_7" = list(method = "gam", k = 7)
  ),
  include = "PC"
)
p5$plot

# Using logistic regression as user-defined estimation function, fitting on percentiles
# Function needs to take exactly these two arguments
my_est <- function(outcome, score) {
  # Calculate percentiles
  perc <- ecdf(score)(score)
  # Fit
  m <- glm(outcome ~ perc, family = "binomial")
  # Generate predictions
  preds <- predict(m, type = "response")
  # Return a data.frame with exactly these columns
  return(
    data.frame(
      score = score,
      percentile = perc,
      outcome = outcome,
      estimate = preds
    )
  )
}
p6 <- riskProfile(
  outcome = truth,
  score = rscore,
  methods = list(my_lr = my_est)
)
p6$plot

# Using cgam as user-defined estimation function
# Note that you can also use the predefined cgam using methods = "cgam"
# Attach needed library
# Watch out for masking of mgcv::s and cgam::s if both are attached
library(cgam, quietly = TRUE) 
# Function needs to take exactly these two arguments
my_est <- function(outcome, score) {
  # Fit on raw predictions with space = "E"
  m <- cgam(
    outcome ~ s.incr(score, numknots = 5, space = "E"),
    family = "binomial"
  )
  # Generate predictions and convert to vector
  preds <- predict(m, type = "response")$fit
  # Return a data.frame with exactly these columns
  out <- data.frame(
    score = score,
    percentile = ecdf(score)(score),
    outcome = outcome,
    estimate = preds
  )
  return(out)
}

p7 <- riskProfile(
  outcome = truth,
  score = rscore,
  methods = list(my_cgam = my_est)
)
p7$plot

# Prevalence adjustment to 0.1
p8 <- riskProfile(outcome = truth, score = rscore, prev.adj = 0.1)
p8$plot

}
\seealso{
\code{\link[=calibrationProfile]{calibrationProfile()}} \code{\link[=sensSpec]{sensSpec()}}

\code{\link[=getPAVAest]{getPAVAest()}} \code{\link[=getBINNEDest]{getBINNEDest()}} \code{\link[=getGAMest]{getGAMest()}} \code{\link[=getCGAMest]{getCGAMest()}} \code{\link[=getMSPLINEest]{getMSPLINEest()}}
\code{\link[=getASISest]{getASISest()}}
}
